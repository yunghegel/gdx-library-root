/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package plugins;

import groovy.lang.Closure;
import org.gradle.api.Project;
import org.gradle.api.Plugin;
import org.gradle.api.Task;
import org.gradle.api.artifacts.Dependency;
import org.gradle.api.artifacts.DependencyResolutionListener;
import org.gradle.api.artifacts.DependencySet;
import org.gradle.api.artifacts.ResolvableDependencies;
import org.gradle.api.logging.LogLevel;
import org.gradle.api.provider.Property;

import java.util.ArrayList;
import java.util.List;

/**
 * A simple 'hello world' plugin.
 */
public class PluginsPlugin implements Plugin<Project> {


    public void apply(Project project) {
//        // Register a task
//        project.getTasks().register("greeting", task -> {
//            task.doLast(s -> System.out.println("Hello from plugin 'plugins.greeting'"));
//        });

        project.getExtensions().create("packages", PackagesExtension.class,project);

        project.getTasks().register("yunghegelLibrary", task -> {

            task.dependsOn(project.getTasks().findByName("build"));
            task.shouldRunAfter(project.getTasks().findByName("build"));

            task.doFirst(s -> {
                project.getRepositories().maven(mavenArtifactRepository -> {
                    mavenArtifactRepository.setUrl("https://repo.yunghegel.org/snapshots");
                });
            });
            task.doLast(s -> {
                PackagesExtension packagesExtension = project.getExtensions().getByType(PackagesExtension.class);
                if (packagesExtension == null) {
                    packagesExtension = new PackagesExtension(project);
                }

                DependencySet deps = project.getConfigurations().getByName("compileClasspath").getDependencies();



                packagesExtension.packages.forEach(pkg->{
                    project.getGradle().addListener(new DependencyResolutionListener() {
                        @Override
                        public void beforeResolve(ResolvableDependencies dependencies) {
                            Dependency dep = addDependency(project,pkg,"implementation");
                            deps.add(dep);
                            dependencies.getDependencies().add(dep);
                            project.getGradle().removeListener(this);
                            project.getLogger().log(LogLevel.ERROR,"added dependency "+ pkg);
                            System.out.println("added dependencies" + project.getDependencies());
                        }

                        @Override
                        public void afterResolve(ResolvableDependencies dependencies) {

                        }
                    });
//                    addDependency(project,pkg,"implementation");

                });
            });
        });
    }




    public void packages(Closure closure){
        closure.setDelegate(this);
        closure.setResolveStrategy(Closure.DELEGATE_FIRST);
        closure.call();
    }



    Dependency addDependency(Project project, String url, String configurationName) {
        Dependency dep = project.getDependencies().create(url);
        project.getDependencies().add(configurationName, dep);
        return dep;

    }

    Dependency addDependency(Project project, Package pkg, String configurationName) {
        Dependency dep = project.getDependencies().create(pkg.toString());
        project.getDependencies().add(configurationName, dep);
        return dep;

    }


    Dependency addPackageDependency(Project project, String packageName, String version, String configurationName) {
        Dependency dep = project.getDependencies().create(packageName + ":" + version);
        project.getDependencies().add(configurationName, dep);
        return dep;
    }

    void addUtils(Project project){
        addDependency(project,Package.utils,"implementation");
    }

    void addBmesh(Project project){
        addDependency(project,Package.bmesh,"implementation");
    }

    void addGizmos(Project project){
        addDependency(project,Package.gizmos,"implementation");
    }

    void addMeshPlus(Project project){
        addDependency(project,Package.mesh_plus,"implementation");
    }

    void addPicking(Project project){
        addDependency(project,Package.picking,"implementation");
    }

    void addScenegraph(Project project){
        addDependency(project,Package.scenegraph,"implementation");
    }





    public enum Package {
        bmesh("gdx-bmesh","0.1-SNAPSHOT"),
        gizmos("gdx-gizmos","0.2-SNAPSHOT"),
        mesh_plus("gdx-mesh-plus","0.2-SNAPSHOT"),
        picking("gdx-picking","0.2-SNAPSHOT"),
        scenegraph("gdx-scenegraph","0.3-SNAPSHOT"),
        utils("gdx-yung-utils","0.2-SNAPSHOT");

        private final String pkg;
        private final String version;

        Package(String pkg, String version) {
            this.pkg = pkg;
            this.version = version;
        }

        @Override
        public String toString() {
            return "org.yunghegel.gdx"+":"+pkg+":"+version;
        }

    }


}
